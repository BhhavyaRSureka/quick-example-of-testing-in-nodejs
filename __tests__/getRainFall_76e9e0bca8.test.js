// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTesting using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=getRainFall_d54b81da79
ROOST_METHOD_SIG_HASH=getRainFall_76e9e0bca8


*/

// ********RoostGPT********
// jest.config.js
module.exports = {
  testEnvironment: "node", // setting up the test environment
};

// fetch-weather.js
const getRainFall = (rainObj) => {
  if (!rainObj) return 0;
  if (rainObj['1h'] !== undefined) return rainObj['1h'];
  if (rainObj['2h'] !== undefined) return rainObj['2h'];
  if (rainObj['3h'] !== undefined) return rainObj['3h'];
  return 0;
};

module.exports = { getRainFall };

// getRainFall.test.js
const { getRainFall } = require('../fetch-weather');

describe('getRainFall', () => {
  test('returns 0 if rainObj is null or undefined', () => {
    expect(getRainFall(null)).toBe(0);
    expect(getRainFall(undefined)).toBe(0);
  });

  test('returns 0 if rainObj does not have 1h, 2h, or 3h properties', () => {
    const rainObj = {};
    expect(getRainFall(rainObj)).toBe(0);
  });

  test('returns the value of 1h if present', () => {
    const rainObj = { '1h': 5 };
    expect(getRainFall(rainObj)).toBe(5);
  });

  test('returns the value of 2h if 1h is not present', () => {
    const rainObj = { '2h': 10 };
    expect(getRainFall(rainObj)).toBe(10);
  });

  test('returns the value of 3h if neither 1h nor 2h are present', () => {
    const rainObj = { '3h': 15 };
    expect(getRainFall(rainObj)).toBe(15);
  });

  test('returns the value of 1h even if other properties are present', () => {
    const rainObj = { '1h': 5, '2h': 10, '3h': 15 };
    expect(getRainFall(rainObj)).toBe(5);
  });

  test('prefers the value of 1h over 2h and 3h even if smaller', () => {
    const rainObj = { '1h': 2, '2h': 10, '3h': 15 };
    expect(getRainFall(rainObj)).toBe(2);
  });

  test('prefers the value of 2h over 3h if 1h not present', () => {
    const rainObj = { '2h': 10, '3h': 15 };
    expect(getRainFall(rainObj)).toBe(10);
  });

  // Setup or teardown functions
  beforeAll(() => {
    // Setup logic if required before all tests run
  });

  afterAll(() => {
    // Cleanup logic if required after all tests run
  });

  beforeEach(() => {
    // Setup logic if required before each test runs
  });

  afterEach(() => {
    // Cleanup logic if required after each test runs
  });
});

