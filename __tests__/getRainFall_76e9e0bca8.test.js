// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTesting using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=getRainFall_d54b81da79
ROOST_METHOD_SIG_HASH=getRainFall_76e9e0bca8


*/

// ********RoostGPT********
const getRainFall = require('./fetch-weather').getRainFall;

describe('getRainFall', () => {
  test('returns 0 if rainObj is null', () => {
    expect(getRainFall(null)).toBe(0);
  });

  test('returns 0 if rainObj is undefined', () => {
    expect(getRainFall(undefined)).toBe(0);
  });

  test('returns 0 if rainObj has no rain data', () => {
    expect(getRainFall({})).toBe(0);
  });

  test('returns rain for 1h if present', () => {
    const rainObj = { '1h': 5 };
    expect(getRainFall(rainObj)).toBe(5);
  });

  test('returns rain for 2h if 1h is not present', () => {
    const rainObj = { '2h': 10 };
    expect(getRainFall(rainObj)).toBe(10);
  });

  test('returns rain for 3h if 1h and 2h are not present', () => {
    const rainObj = { '3h': 15 };
    expect(getRainFall(rainObj)).toBe(15);
  });

  test('gives precedence to 1h over 2h and 3h', () => {
    const rainObj = { '1h': 20, '2h': 10, '3h': 5 };
    expect(getRainFall(rainObj)).toBe(20);
  });

  test('gives precedence to 2h over 3h when 1h is not present', () => {
    const rainObj = { '2h': 30, '3h': 15 };
    expect(getRainFall(rainObj)).toBe(30);
  });

  test('handles cases where rain values are 0 properly', () => {
    const rainObj = { '1h': 0, '2h': 0, '3h': 0 };
    expect(getRainFall(rainObj)).toBe(0);
  });
  
  test('handles cases with unexpected keys gracefully', () => {
    const rainObj = { '1h': 5, '4h': 20 };
    expect(getRainFall(rainObj)).toBe(5);
  });
});

