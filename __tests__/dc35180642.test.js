// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTesting using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=4c53294148
ROOST_METHOD_SIG_HASH=dc35180642


*/

// ********RoostGPT********
// __tests__/app.test.js

const { fetchWeather, prepareForWeather, printLine } = require('../app');

// Mock the necessary methods inside the prepareForWeather object
jest.mock('../app', () => {
  const actualApp = jest.requireActual('../app');
  return {
    ...actualApp,
    prepareForWeather: {
      ...actualApp.prepareForWeather,
      doINeed: {
        ...actualApp.prepareForWeather.doINeed,
        umbrella: jest.fn(),
        suncream: jest.fn(),
        jumper: jest.fn(),
        water: jest.fn(),
      },
    },
    printLine: jest.fn(),
  };
});

describe('fetchWeather Method', () => {
  beforeAll(() => {
    global.printLine = printLine;
  });

  beforeEach(() => {
    jest.resetAllMocks();
  });

  test('Should call all necessary methods for a rainy day', async () => {
    expect.assertions(8);

    prepareForWeather.doINeed.umbrella.mockReturnValue(true);
    prepareForWeather.doINeed.suncream.mockReturnValue(false);
    prepareForWeather.doINeed.jumper.mockReturnValue(true);
    prepareForWeather.doINeed.water.mockReturnValue(false);

    await fetchWeather('London').then(today => {
      expect(prepareForWeather.doINeed.umbrella).toHaveBeenCalledWith(today);
      expect(prepareForWeather.doINeed.suncream).toHaveBeenCalledWith(today);
      expect(prepareForWeather.doINeed.jumper).toHaveBeenCalledWith(today);
      expect(prepareForWeather.doINeed.water).toHaveBeenCalledWith(today);

      expect(printLine).toHaveBeenCalledWith(true, 'Umbrella');
      expect(printLine).toHaveBeenCalledWith(false, 'Suncream');
      expect(printLine).toHaveBeenCalledWith(true, 'Jumper');
      expect(printLine).toHaveBeenCalledWith(false, 'Water');
    });
  });

  test('Should call all necessary methods for a sunny day', async () => {
    expect.assertions(8);

    prepareForWeather.doINeed.umbrella.mockReturnValue(false);
    prepareForWeather.doINeed.suncream.mockReturnValue(true);
    prepareForWeather.doINeed.jumper.mockReturnValue(false);
    prepareForWeather.doINeed.water.mockReturnValue(true);
    
    await fetchWeather('Miami').then(today => {
      expect(prepareForWeather.doINeed.umbrella).toHaveBeenCalledWith(today);
      expect(prepareForWeather.doINeed.suncream).toHaveBeenCalledWith(today);
      expect(prepareForWeather.doINeed.jumper).toHaveBeenCalledWith(today);
      expect(prepareForWeather.doINeed.water).toHaveBeenCalledWith(today);

      expect(printLine).toHaveBeenCalledWith(false, 'Umbrella');
      expect(printLine).toHaveBeenCalledWith(true, 'Suncream');
      expect(printLine).toHaveBeenCalledWith(false, 'Jumper');
      expect(printLine).toHaveBeenCalledWith(true, 'Water');
    });
  });
});

