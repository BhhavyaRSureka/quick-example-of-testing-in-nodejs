// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTesting using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=4c53294148
ROOST_METHOD_SIG_HASH=dc35180642


*/

// ********RoostGPT********
const { expect } = require('chai');
const sinon = require('sinon');
const { fetchWeather } = require('../app');
const { prepareForWeather } = require('../app');
const { printLine } = require('../app');

describe('Weather Preparation Suite', () => {
    let sandbox;
    
    beforeEach(() => {
        sandbox = sinon.createSandbox();

        sandbox.stub(prepareForWeather.doINeed, 'umbrella').returns(true);
        sandbox.stub(prepareForWeather.doINeed, 'suncream').returns(false);
        sandbox.stub(prepareForWeather.doINeed, 'jumper').returns(true);
        sandbox.stub(prepareForWeather.doINeed, 'water').returns(true);
        sandbox.stub(printLine, 'print');
    });

    afterEach(() => {
        sandbox.restore();
    });

    it('should recommend an umbrella on rainy days', (done) => {
        sandbox.stub(fetchWeather, 'fetchWeather').callsFake((location, callback) => {
            callback(null, { weather: 'rainy' });
        });

        fetchWeather.fetchWeather('Seattle', (err, today) => {
            expect(prepareForWeather.doINeed.umbrella.calledWith(today)).to.be.true;
            expect(prepareForWeather.doINeed.umbrella(today)).to.equal(true);
            expect(printLine.print.calledWith('Take an umbrella')).to.be.true;
            done();
        });
    });

    it('should not recommend suncream on cloudy days', (done) => {
        sandbox.stub(fetchWeather, 'fetchWeather').callsFake((location, callback) => {
            callback(null, { weather: 'cloudy' });
        });

        fetchWeather.fetchWeather('London', (err, today) => {
            expect(prepareForWeather.doINeed.suncream.calledWith(today)).to.be.true;
            expect(prepareForWeather.doINeed.suncream(today)).to.equal(false);
            expect(printLine.print.calledWith('No suncream needed')).to.be.true;
            done();
        });
    });

    it('should recommend a jumper on cold days', (done) => {
        sandbox.stub(fetchWeather, 'fetchWeather').callsFake((location, callback) => {
            callback(null, { temperature: 'cold' });
        });

        fetchWeather.fetchWeather('New York', (err, today) => {
            expect(prepareForWeather.doINeed.jumper.calledWith(today)).to.be.true;
            expect(prepareForWeather.doINeed.jumper(today)).to.equal(true);
            expect(printLine.print.calledWith('Wear a jumper')).to.be.true;
            done();
        });
    });

    it('should recommend water on hot days', (done) => {
        sandbox.stub(fetchWeather, 'fetchWeather').callsFake((location, callback) => {
            callback(null, { temperature: 'hot' });
        });

        fetchWeather.fetchWeather('Phoenix', (err, today) => {
            expect(prepareForWeather.doINeed.water.calledWith(today)).to.be.true;
            expect(prepareForWeather.doINeed.water(today)).to.equal(true);
            expect(printLine.print.calledWith('Carry water')).to.be.true;
            done();
        });
    });

    it('should handle errors from fetchWeather gracefully', (done) => {
        sandbox.stub(fetchWeather, 'fetchWeather').callsFake((location, callback) => {
            callback(new Error('Network error'), null);
        });

        fetchWeather.fetchWeather('Mars', (err, today) => {
            expect(err).to.be.an('error');
            expect(err.message).to.equal('Network error');
            done();
        });
    });
});

