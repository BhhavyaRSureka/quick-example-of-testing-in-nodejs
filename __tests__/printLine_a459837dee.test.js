// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTesting using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=printLine_adf0a41ef1
ROOST_METHOD_SIG_HASH=printLine_a459837dee


*/

// ********RoostGPT********
// Save this as a test file, for example `printLine.test.js`

const { describe, expect, test, beforeEach, afterEach } = require('@jest/globals');
const colors = require('colors');
const { printLine } = require('../app');

describe('printLine functionality', () => {

  // Mocked console.log to capture its calls
  let consoleOutput = [];
  const mockedLog = output => consoleOutput.push(output);

  beforeEach(() => {
    // Clears the console output before each test
    consoleOutput = [];
    // Replace the console.log with a mock
    console.log = mockedLog;
  });

  afterEach(() => {
    // Restore original console.log after each test
    console.log = console['log'];
  });

  test('should print text with a check mark and green color when required is true', () => {
    const expectedOutput = `\u2714 Success Text`.green;
    printLine(true, "Success Text");

    expect(consoleOutput).toContain(expectedOutput);
  });

  test('should print text with a cross mark and red color when required is false', () => {
    const expectedOutput = `\u2716 Error Text`.red;
    printLine(false, "Error Text");

    expect(consoleOutput).toContain(expectedOutput);
  });

  test('should handle non-string text input by converting it to a string', () => {
    const numericText = 123;
    const expectedOutput = `\u2714 ${numericText.toString()}`.green;
    printLine(true, numericText);

    expect(consoleOutput).toContain(expectedOutput);
  });

  test('should handle empty text string', () => {
    const expectedOutputRequired = `\u2714 `.green;
    const expectedOutputNotRequired = `\u2716 `.red;

    printLine(true, "");
    printLine(false, "");

    expect(consoleOutput).toContain(expectedOutputRequired);
    expect(consoleOutput).toContain(expectedOutputNotRequired);
  });

  test('should be able to handle null as text input', () => {
    const expectedOutput = `\u2714 null`.green;
    printLine(true, null);

    expect(consoleOutput).toContain(expectedOutput);
  });

});

