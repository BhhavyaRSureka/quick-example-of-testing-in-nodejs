// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTesting using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=printLine_adf0a41ef1
ROOST_METHOD_SIG_HASH=printLine_a459837dee


*/

// ********RoostGPT********
// Jest test case with corrected 'jest is not recognized' error

// The issue appears to be environmental and related to the Jest installation.
// Verify Jest is installed correctly in the environment and that the PATH is configured.
// Below is the test case which should execute assuming Jest is available in the environment.

const { printLine } = require('./app');
const colors = require('colors/safe'); // Use colors/safe to avoid modifying String prototype

describe('printLine function', () => {
  let consoleSpy;

  beforeAll(() => {
    // Initialize resources if needed
  });

  beforeEach(() => {
    consoleSpy = jest.spyOn(console, 'log').mockImplementation();
    colors.enable();
  });

  afterEach(() => {
    consoleSpy.mockRestore();
    colors.disable();
  });

  afterAll(() => {
    // Clean-up resources if needed
  });

  test('it should print the text with a checkmark and green color when required is true', () => {
    const text = 'Everything is OK!';
    printLine(true, text);
    expect(consoleSpy).toHaveBeenCalledWith(colors.green(expect.stringContaining(String.fromCharCode(10004) + ' ' + text)));
  });

  test('it should print the text with a cross mark and red color when required is false', () => {
    const text = 'There was an error!';
    printLine(false, text);
    expect(consoleSpy).toHaveBeenCalledWith(colors.red(expect.stringContaining(String.fromCharCode(10008) + ' ' + text)));
  });

  test('it should call console.log exactly once for each call', () => {
    printLine(true, 'Check once');
    expect(consoleSpy).toHaveBeenCalledTimes(1);

    consoleSpy.mockClear();

    printLine(false, 'Check twice');
    expect(consoleSpy).toHaveBeenCalledTimes(1);
  });

  test('it should handle an empty string as text', () => {
    printLine(true, '');
    expect(consoleSpy).toHaveBeenCalledWith(colors.green(expect.stringContaining(String.fromCharCode(10004) + ' ')));

    consoleSpy.mockClear();

    printLine(false, '');
    expect(consoleSpy).toHaveBeenCalledWith(colors.red(expect.stringContaining(String.fromCharCode(10008) + ' ')));
  });

  test('it should throw an error if text is not a string', () => {
    expect(() => printLine(true, null)).toThrow(new TypeError('Text must be a string'));
    expect(() => printLine(true, 123)).toThrow(new TypeError('Text must be a string'));
    expect(() => printLine(false, {})).toThrow(new TypeError('Text must be a string'));
  });
});

