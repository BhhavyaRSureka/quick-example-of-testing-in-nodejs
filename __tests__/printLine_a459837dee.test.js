// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTesting using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=printLine_adf0a41ef1
ROOST_METHOD_SIG_HASH=printLine_a459837dee


*/

// ********RoostGPT********
// __tests__/app.test.js

const { printLine } = require('../app');
const colors = require('colors/safe'); // Use safe to avoid modifying String.prototype

describe('printLine function', () => {

  // Mock console.log to prevent actual logging and to spy on calls
  const originalLog = console.log;
  let consoleOutput;
  beforeEach(() => {
    consoleOutput = [];
    console.log = (message) => {
      consoleOutput.push(message);
    };
  });

  afterEach(() => {
    console.log = originalLog;
  });

  test('printLine should print a checkmark and text in green when required is true', () => {
    const expectedOutput = colors.green(String.fromCharCode(10004) + " Success");
    printLine(true, "Success");
    expect(consoleOutput).toContain(expectedOutput);
  });

  test('printLine should print a cross mark and text in red when required is false', () => {
    const expectedOutput = colors.red(String.fromCharCode(10006) + " Failure");
    printLine(false, "Failure");
    expect(consoleOutput).toContain(expectedOutput);
  });

  test('printLine should handle empty text input', () => {
    const expectedOutputTrue = colors.green(String.fromCharCode(10004));
    const expectedOutputFalse = colors.red(String.fromCharCode(10006));
    printLine(true, "");
    expect(consoleOutput).toContain(expectedOutputTrue);
    printLine(false, "");
    expect(consoleOutput).toContain(expectedOutputFalse);
  });

  test('printLine should handle non-string text input', () => {
    const textInput = 1234;
    const expectedOutputTrue = colors.green(String.fromCharCode(10004) + ` ${textInput}`);
    const expectedOutputFalse = colors.red(String.fromCharCode(10006) + ` ${textInput}`);
    printLine(true, textInput);
    expect(consoleOutput).toContain(expectedOutputTrue);
    printLine(false, textInput);
    expect(consoleOutput).toContain(expectedOutputFalse);
  });

  test('printLine should throw an error if text is not provided', () => {
    expect(() => printLine(true)).toThrow();
    expect(() => printLine(false)).toThrow();
  });
});

