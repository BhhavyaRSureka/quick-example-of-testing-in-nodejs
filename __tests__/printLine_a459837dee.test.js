// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTesting using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=printLine_adf0a41ef1
ROOST_METHOD_SIG_HASH=printLine_a459837dee


*/

// ********RoostGPT********
const { expect } = require('chai');
const sinon = require('sinon');
require('colors');
const printLine = require('../app').printLine;

describe('PrintLine Tests', function() {
  let consoleLogStub;

  beforeEach(function() {
    consoleLogStub = sinon.stub(console, 'log');
  });

  afterEach(function() {
    consoleLogStub.restore();
  });

  it('should print text with a check mark in green when required is true', function() {
    printLine(true, 'Success message');
    expect(consoleLogStub.calledWith((String.fromCharCode(10004) + " Success message").green)).to.be.true;
  });

  it('should print text with a cross mark in red when required is false', function() {
    printLine(false, 'Error message');
    expect(consoleLogStub.calledWith((String.fromCharCode(10006) + " Error message").red)).to.be.true;
  });

  it('should convert number to string if numeric text is provided', function() {
    printLine(true, 12345);
    expect(consoleLogStub.calledWith((String.fromCharCode(10004) + " 12345").green)).to.be.true;
  });

  it('should not throw if text is undefined', function() {
    expect(() => printLine(true, undefined)).to.not.throw();
  });

  it('should not throw if text is null', function() {
    expect(() => printLine(true, null)).to.not.throw();
  });
});

