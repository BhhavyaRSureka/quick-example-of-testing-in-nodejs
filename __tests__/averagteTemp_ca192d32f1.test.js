// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTesting using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=averagteTemp_aab1d2fafe
ROOST_METHOD_SIG_HASH=averagteTemp_ca192d32f1


*/

// ********RoostGPT********
const { describe, it, expect, beforeEach, afterEach } = require('@jest/globals');
const { averageTemp } = require('../prepared-for-the-weather');

describe('averageTemp', function() {
  // Set up any required preconditions here
  beforeEach(function() {
    // This could be used to set up environment or variables for each test, if needed
  });

  // Clean-up tasks can be handled here
  afterEach(function() {
    // This could be used to clean up after each test, if needed
  });

  // Test cases
  it('should correctly calculate the average temperature for positive numbers', function() {
    expect(averageTemp(20, 30)).toBe(25);
  });

  it('should correctly calculate the average temperature for negative numbers', function() {
    expect(averageTemp(-10, -20)).toBe(-15);
  });

  it('should handle decimal temperatures correctly', function() {
    expect(averageTemp(20.5, 30.3)).toBeCloseTo(25.4);
  });

  it('should return a number', function() {
    expect(typeof averageTemp(10, 20)).toBe('number');
  });

  it('should return NaN when the input is not a number', function() {
    expect(averageTemp('hot', 'cold')).toBeNaN();
  });

  it('should return NaN when one of the inputs is not a number', function() {
    expect(averageTemp(10, 'cold')).toBeNaN();
  });

  // Add more test cases as required
});

