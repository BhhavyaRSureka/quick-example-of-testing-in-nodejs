// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTesting using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=averagteTemp_aab1d2fafe
ROOST_METHOD_SIG_HASH=averagteTemp_ca192d32f1


*/

// ********RoostGPT********
const averageTemp = require('./prepared-for-the-weather').averageTemp;

describe('averageTemp function', () => {
  // It is assumed that setup and cleanup are not necessary for this simple function

  test('it should return the average of two temperatures', () => {
    expect(averageTemp(10, 20)).toBe(15);
  });

  test('it should return the same value when both temperatures are equal', () => {
    expect(averageTemp(30, 30)).toBe(30);
  });

  test('it should work with negative temperatures', () => {
    expect(averageTemp(-10, 0)).toBe(-5);
  });

  test('it should return NaN if any of the temperatures is not a number', () => {
    expect(averageTemp('cold', 20)).toBeNaN();
    expect(averageTemp(10, 'hot')).toBeNaN();
  });

  test('it should return the result correctly if max is 0', () => {
    expect(averageTemp(10, 0)).toBe(5);
  });

  test('it should return the correct average with floating point numbers', () => {
    expect(averageTemp(5.5, 6.5)).toBeCloseTo(6);
  });

  // Edge case: extremely high values
  test('it should handle very high temperature values correctly', () => {
    expect(averageTemp(1000, 2000)).toBe(1500);
  });
});

