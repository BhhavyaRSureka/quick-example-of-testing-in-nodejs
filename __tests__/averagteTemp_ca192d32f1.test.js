// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTesting using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=averagteTemp_aab1d2fafe
ROOST_METHOD_SIG_HASH=averagteTemp_ca192d32f1


*/

// ********RoostGPT********
const { averageTemp } = require('./prepared-for-the-weather');

describe('averageTemp', () => {
  
  test('should calculate the average of two positive temperatures', () => {
    expect(averageTemp(20, 30)).toBe(25);
  });

  test('should calculate the average of two negative temperatures', () => {
    expect(averageTemp(-10, -20)).toBe(-15);
  });

  test('should calculate the average of two floating point temperatures', () => {
    expect(averageTemp(5.5, 6.3)).toBeCloseTo(5.9, 1);
  });

  test('should calculate the average of two same temperatures', () => {
    expect(averageTemp(25, 25)).toBe(25);
  });

  test('should calculate the average of extreme temperatures', () => {
    expect(averageTemp(Number.MIN_VALUE, Number.MAX_VALUE)).toBeCloseTo(Number.MAX_VALUE / 2, 1);
  });

  test('should throw an error when one of the arguments is not a number', () => {
    expect(() => averageTemp('a', 30)).toThrow(TypeError);
    expect(() => averageTemp(30, 'b')).toThrow(TypeError);
  });

  test('should throw an error when no arguments are passed', () => {
    expect(() => averageTemp()).toThrow(Error);
  });

});

