// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTesting using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=averagteTemp_aab1d2fafe
ROOST_METHOD_SIG_HASH=averagteTemp_ca192d32f1


*/

// ********RoostGPT********
const { describe, expect, beforeAll, beforeEach, afterAll, afterEach, test } = require('@jest/globals');
const averageTemp = require('./prepared-for-the-weather').averageTemp;

describe('averageTemp', () => {
  beforeAll(() => {
    // Any global setup can be done here
  });

  beforeEach(() => {
    // Any setup before each test case can be done here
  });

  afterAll(() => {
    // Any global cleanup can be done here
  });

  afterEach(() => {
    // Any cleanup after each test case can be done here
  });

  test('should correctly calculate the average of two temperatures', () => {
    const result = averageTemp(10, 20);
    expect(result).toBe(15);
  });

  test('should handle negative temperatures', () => {
    const result = averageTemp(-10, 0);
    expect(result).toBe(-5);
  });

  test('should handle single-digit temperatures', () => {
    const result = averageTemp(5, 7);
    expect(result).toBe(6);
  });

  test('should return NaN when a non-number is passed', () => {
    const result = averageTemp('hot', 50);
    expect(result).toBeNaN();
  });

  test('should throw an error when only one argument is provided', () => {
    expect(() => averageTemp(10)).toThrow();
  });
});

